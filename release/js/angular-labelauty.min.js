'use strict';

angular.module('angular-labelauty', []);

angular.module('angular-labelauty').directive('labelauty', ['$compile', function ($compile) {
  return {
    restrict: 'E',
    require: '?ngModel',
    scope: {
      label: '@',
      icon: '@',
      ngDisabled: '@'
    },
    link: function link(scope, element, attrs, ngModelCtrl) {
      _compileAndReplaceElement();

      scope.disabled = false;
      scope.checked = false;

      scope.toggleModelValue = function ($event) {
        if ($event) $event.preventDefault();

        if (scope.disabled) return;

        scope.checked = !scope.checked;

        ngModelCtrl.$setViewValue(scope.checked);
      };

      attrs.$observe('ngDisabled', function (val) {
        return scope.disabled = val;
      });

      scope.$watch(function () {
        return ngModelCtrl.$modelValue;
      }, function (modelValue) {
        return scope.checked = modelValue;
      });

      function _compileAndReplaceElement() {
        var clonedElement = angular.element('<input type="checkbox" ng-model="ngModel">');
        clonedElement.removeAttr('labelauty');

        var wrapperEl = angular.element('<div class="labelauty"></div>');

        var innerEl = angular.element('<div class="labelauty-inner" ng-class="{ \'active\' : checked, \'disabled\' : disabled }" ng-click="toggleModelValue($event)" ng-class="{ \'disabled\' : disabled }">\n            <i class="labelauty-inner-icon fa" ng-class="{ \'fa-check\' : checked, \'fa-circle\' : !checked }"></i>\n            <span>{{ label }}</span>\n            </div>');

        wrapperEl.append(clonedElement);
        wrapperEl.append(innerEl);

        var compiledElement = $compile(wrapperEl)(scope);

        element.replaceWith(compiledElement);
      }
    }
  };
}]);